# -*- coding: utf-8 -*-import arcpyimport osimport pyarrow as paimport pyarrow.parquet as pqfrom pyarrow import fsimport timeclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [ParcelFCToParquet]class ParcelFCToParquet(object):    def __init__(self):        self.label = "Parcel Feature Class to Parquet"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        param0 = arcpy.Parameter(            displayName="Parcel Features",            name="parcel_features",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input"        )        param1 = arcpy.Parameter(            displayName="Output Folder",            name="output_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input"        )                params = [param0, param1]        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):                ##### Create function that converts runtime to text #####        def generate_runtime_str(runtime_seconds):            hours_str = "hours"            minutes_str = "minutes"            seconds_str = "seconds"            hours = int(runtime_seconds // 3600)            minutes = int((runtime_seconds % 3600) // 60)            seconds = int(runtime_seconds % 60)            if hours == 1:                hours_str = "hour"            if minutes == 1:                minutes_str = "minute"            if seconds == 1:                seconds_str = "second"            if runtime_seconds < 60:                runtime_str = f"{seconds} {seconds_str}"             elif runtime_seconds < 3600:                runtime_str = f"{minutes} {minutes_str} and {seconds} {seconds_str}"            else:                runtime_str = f"{hours} {hours_str} {minutes} {minutes_str} and {seconds} {seconds_str}"            return runtime_str        arcpy.AddMessage("Initializing Parcel Feature Class to Parquet Tool\n\n")        start = time.perf_counter()        ##### Assign parameters to variables #####                param0 = parameters[0].value ## Input Parcel Feature Class        param1 = str(parameters[1].value) ## Output Folder        ##### Setup Environment #####        arcpy.env.workspace = arcpy.env.scratchGDB        aprx = arcpy.mp.ArcGISProject("CURRENT")        mp = aprx.activeMap        if not os.path.exists(param1):            os.makedirs(param1)        output_folder = os.path.join(param1)        if not os.path.exists(output_folder):            os.makedirs(output_folder)        sp_ref = arcpy.SpatialReference(4269)        ##### Step 1 out of 4 -- Cleaning Parcel Dataset #####        arcpy.AddMessage("Step 1 out of 4 -- Standardizing Parcel Dataset")        start_1 = time.perf_counter()        arcpy.conversion.ExportFeatures(            in_features = param0,            out_features = "parcels_copy"            )        """        arcpy.management.Copy(            in_data = param0,            out_data = "parcels_copy"            )        """        arcpy.management.Project(            in_dataset = "parcels_copy",            out_dataset = "parcels_working",            out_coor_system = sp_ref            )        fields = arcpy.ListFields("parcels_working")        for field in fields:            if field.name not in ["OBJECTID", "SHAPE", "Shape", "Shape_Length", "Shape_Area"]:                arcpy.management.DeleteField(                    in_table = "parcels_working",                    drop_field = field.name                    )        end_1 = time.perf_counter()        arcpy.AddMessage("Step 1 completed in {}\n\n".format(generate_runtime_str(end_1 - start_1)))        ##### Step 2 out of 4 -- Assigning Unique Identifiers to Parcel Dataset #####        arcpy.AddMessage("Step 2 out of 4 -- Assigning Unique Identifiers")        start_2 = time.perf_counter()        arcpy.management.AddField(            in_table = "parcels_working",            field_name = "Parcel_UID",            field_type = "LONG",            field_alias = "Parcel_UID",            field_is_nullable = "NULLABLE",            field_is_required = "NON_REQUIRED"            )        arcpy.management.CalculateField(            in_table = "parcels_working",            field = "Parcel_UID",            expression = "int(!OBJECTID!) - 1",            expression_type = "PYTHON3"            )        end_2 = time.perf_counter()        arcpy.AddMessage("Step 2 completed in {}\n\n".format(generate_runtime_str(end_2 - start_2)))        ##### Step 3 out of 4 -- Calculating the Area of each Parcel #####        arcpy.AddMessage("Step 3 out of 4 -- Calculating Area")        start_3 = time.perf_counter()        arcpy.management.AddField(            in_table = "parcels_working",            field_name = "AREA_M2",            field_type = "DOUBLE",            field_alias = "AREA_M2",            field_is_nullable = "NULLABLE",            field_is_required = "NON_REQUIRED"            )        arcpy.management.CalculateGeometryAttributes(            in_features = "parcels_working",            geometry_property = [["AREA_M2", "AREA_GEODESIC"]],            area_unit = "SQUARE_METERS"            )        end_3 = time.perf_counter()        arcpy.AddMessage("Step 3 completed in {}\n\n".format(generate_runtime_str(end_3 - start_3)))        ##### Step 4 out of 4 -- Exporting Parcels to Parquet Files #####        arcpy.AddMessage("Step 4 out of 4 -- Exporting Parcels to Parquet Files")        start_4 = time.perf_counter()        """        lyr_Parcel = mp.listLayers("parcels_working")[0]        lyr_Parcel.visible = False                lyr_H3 = mp.listLayers("h3")[0]        unique_hex_code_list= list()        with arcpy.da.SearchCursor(lyr_H3, "GRID_ID") as cursor:              for row in cursor:                unique_hex_code_list.append(row[0])                arcpy.SetProgressor("step", "Exporting to Parquet Files...", 0, len(unique_hex_code_list), 1)        for unique_hex_code in unique_hex_code_list:        """        pq_path = os.path.join(output_folder, f"Parcel.pqt")        """        arcpy.management.SelectLayerByAttribute(            in_layer_or_view = lyr_H3,            selection_type = "NEW_SELECTION",            where_clause = f"GRID_ID = '{unique_hex_code}'"            )        arcpy.management.SelectLayerByLocation(            in_layer = lyr_Parcel,            overlap_type = "INTERSECT",            select_features = lyr_H3,            selection_type = "NEW_SELECTION"            )        description = arcpy.Describe(lyr_Parcel)        """        description = arcpy.Describe("parcels_working")        field_names = [field.name for field in description.fields]        shape_name = description.shapeFieldName        field_names.remove(shape_name)        shape_format = "WKT"        field_names.append(shape_name + "@" + shape_format)        os.makedirs(pq_path, exist_ok=True)        filesystem = fs.LocalFileSystem()        pq_part = 0        py_nume = 0        py_dict = {k: [] for k in field_names}        arcpy.env.autoCancelling = False        py_size = 10000        with arcpy.da.SearchCursor("parcels_working", field_names, spatial_reference=sp_ref) as cursor:            for pos, row in enumerate(cursor):                for k, v in zip(field_names, row):                    py_dict[k].append(v)                py_nume += 1                if py_nume == py_size:                    table = pa.Table.from_pydict(py_dict)                    part_name = f"part-{pq_part:05d}.parquet"                    where = os.path.join(pq_path, part_name)                    pq.write_table(table,                                    where,                                    filesystem=filesystem,                                    version="2.0",                                    flavor="spark")                    pq_part += 1                    py_nume = 0                    py_dict = {k: [] for k in field_names}        if py_nume > 0:            table = pa.Table.from_pydict(py_dict)            part_name = f"part-{pq_part:05}.parquet"            where = os.path.join(pq_path, part_name)            pq.write_table(table,                            where,                            filesystem=filesystem,                            version="2.0",                            flavor="spark")        """        if arcpy.env.isCancelled:            break        arcpy.SetProgressorPosition()        """        end_4 = time.perf_counter()        arcpy.AddMessage("Step 4 completed in {}\n\n".format(generate_runtime_str(end_4 - start_4)))        end = time.perf_counter()        arcpy.AddMessage("Parcel Feature Class to Parquet Tool completed in {}".format(generate_runtime_str(end - start)))                return    def postExecute(self, parameters):        arcpy.management.Delete(arcpy.env.scratchGDB)        arcpy.management.Delete(arcpy.env.scratchGDB)        returnclass ParcelFCToParquetH3(object):    def __init__(self):        self.label = "Parcel Feature Class to Parquet (H3)"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        param0 = arcpy.Parameter(            displayName="Parcel Features",            name="parcel_features",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input"        )        param1 = arcpy.Parameter(            displayName="Output Folder",            name="output_folder",            datatype="DEFolder",            parameterType="Required",            direction="Input"        )                params = [param0, param1]        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):                ##### Create function that converts runtime to text #####        def generate_runtime_str(runtime_seconds):            hours_str = "hours"            minutes_str = "minutes"            seconds_str = "seconds"            hours = int(runtime_seconds // 3600)            minutes = int((runtime_seconds % 3600) // 60)            seconds = int(runtime_seconds % 60)            if hours == 1:                hours_str = "hour"            if minutes == 1:                minutes_str = "minute"            if seconds == 1:                seconds_str = "second"            if runtime_seconds < 60:                runtime_str = f"{seconds} {seconds_str}"             elif runtime_seconds < 3600:                runtime_str = f"{minutes} {minutes_str} and {seconds} {seconds_str}"            else:                runtime_str = f"{hours} {hours_str} {minutes} {minutes_str} and {seconds} {seconds_str}"            return runtime_str        arcpy.AddMessage("Initializing Parcel Feature Class to Parquet Tool\n\n")        start = time.perf_counter()        ##### Assign parameters to variables #####                param0 = parameters[0].value ## Input Parcel Feature Class        param1 = str(parameters[1].value) ## Output Folder        ##### Setup Environment #####        arcpy.env.workspace = arcpy.env.scratchGDB        aprx = arcpy.mp.ArcGISProject("CURRENT")        mp = aprx.activeMap        if not os.path.exists(param1):            os.makedirs(param1)        output_folder = os.path.join(param1, "Parcels")        if not os.path.exists(output_folder):            os.makedirs(output_folder)        sp_ref = arcpy.SpatialReference(4269)        ##### Step 1 out of 5 -- Cleaning Parcel Dataset #####        arcpy.AddMessage("Step 1 out of 5 -- Standardizing Parcel Dataset")        start_1 = time.perf_counter()        arcpy.management.Project(            in_dataset = param0,            out_dataset = "parcels_working",            out_coor_system = sp_ref            )        fields = arcpy.ListFields("parcels_working")        for field in fields:            if field.name not in ["OBJECTID", "Shape", "Shape_Length", "Shape_Area"]:                arcpy.management.DeleteField(                    in_table = "parcels_working",                    drop_field = field.name                    )        end_1 = time.perf_counter()        arcpy.AddMessage("Step 1 completed in {}\n\n".format(generate_runtime_str(end_1 - start_1)))        ##### Step 2 out of 5 -- Assigning Unique Identifiers to Parcel Dataset #####        arcpy.AddMessage("Step 2 out of 5 -- Assigning Unique Identifiers")        start_2 = time.perf_counter()        arcpy.management.AddField(            in_table = "parcels_working",            field_name = "Parcel_UID",            field_type = "LONG",            field_alias = "Parcel_UID",            field_is_nullable = "NULLABLE",            field_is_required = "NON_REQUIRED"            )        arcpy.management.CalculateField(            in_table = "parcels_working",            field = "Parcel_UID",            expression = "int(!OBJECTID!) - 1",            expression_type = "PYTHON3"            )        end_2 = time.perf_counter()        arcpy.AddMessage("Step 2 completed in {}\n\n".format(generate_runtime_str(end_2 - start_2)))        ##### Step 3 out of 5 -- Calculating the Area of each Parcel #####        arcpy.AddMessage("Step 3 out of 5 -- Calculating Area")        start_3 = time.perf_counter()        arcpy.management.AddField(            in_table = "parcels_working",            field_name = "AREA_M2",            field_type = "DOUBLE",            field_alias = "AREA_M2",            field_is_nullable = "NULLABLE",            field_is_required = "NON_REQUIRED"            )        arcpy.management.CalculateGeometryAttributes(            in_features = "parcels_working",            geometry_property = [["AREA_M2", "AREA_GEODESIC"]],            area_unit = "SQUARE_METERS"            )        end_3 = time.perf_counter()        arcpy.AddMessage("Step 3 completed in {}\n\n".format(generate_runtime_str(end_3 - start_3)))        ##### Step 4 out of 5 -- Creating H3 Feature Class #####        arcpy.AddMessage("Step 4 out of 5 -- Creating H3 Feature Class")        start_4 = time.perf_counter()        arcpy.management.GenerateTessellation(            Output_Feature_Class = "h3",            Extent = "parcels_working",            Shape_Type = "H3_HEXAGON",            Spatial_Reference = arcpy.SpatialReference(4269),            H3_Resolution = 6            )        mp.addDataFromPath(os.path.join(arcpy.env.workspace, "parcels_working"))        mp.addDataFromPath(os.path.join(arcpy.env.workspace, "h3"))        end_4 = time.perf_counter()        arcpy.AddMessage("Step 4 completed in {}\n\n".format(generate_runtime_str(end_4 - start_4)))        ##### Step 5 out of 5 -- Exporting Parcels to Parquet Files #####        arcpy.AddMessage("Step 5 out of 5 -- Exporting Parcels to Parquet Files")        start_5 = time.perf_counter()                lyr_Parcel = mp.listLayers("parcels_working")[0]        lyr_Parcel.visible = False        lyr_H3 = mp.listLayers("h3")[0]        unique_hex_code_list= list()        with arcpy.da.SearchCursor(lyr_H3, "GRID_ID") as cursor:              for row in cursor:                unique_hex_code_list.append(row[0])                arcpy.SetProgressor("step", "Exporting to Parquet Files...", 0, len(unique_hex_code_list), 1)        for unique_hex_code in unique_hex_code_list:            pq_path = os.path.join(output_folder, f"{unique_hex_code}.pqt")                        arcpy.management.SelectLayerByAttribute(                in_layer_or_view = lyr_H3,                selection_type = "NEW_SELECTION",                where_clause = f"GRID_ID = '{unique_hex_code}'"                )            arcpy.management.SelectLayerByLocation(                in_layer = lyr_Parcel,                overlap_type = "INTERSECT",                select_features = lyr_H3,                selection_type = "NEW_SELECTION"                )            description = arcpy.Describe(lyr_Parcel)            field_names = [field.name for field in description.fields]            shape_name = description.shapeFieldName            field_names.remove(shape_name)            shape_format = "WKT"            field_names.append(shape_name + "@" + shape_format)            os.makedirs(pq_path, exist_ok=True)            filesystem = fs.LocalFileSystem()            pq_part = 0            py_nume = 0            py_dict = {k: [] for k in field_names}            arcpy.env.autoCancelling = False            py_size = 1000            with arcpy.da.SearchCursor(lyr_Parcel, field_names, spatial_reference=sp_ref) as cursor:                for pos, row in enumerate(cursor):                    for k, v in zip(field_names, row):                        py_dict[k].append(v)                    py_nume += 1                    if py_nume == py_size:                        table = pa.Table.from_pydict(py_dict)                        part_name = f"part-{pq_part:04d}.parquet"                        where = os.path.join(pq_path, part_name)                        pq.write_table(table,                                       where,                                       filesystem=filesystem,                                       version="2.0",                                       flavor="spark")                        pq_part += 1                        py_nume = 0                        py_dict = {k: [] for k in field_names}            if py_nume > 0:                table = pa.Table.from_pydict(py_dict)                part_name = f"part-{pq_part:04d}.parquet"                where = os.path.join(pq_path, part_name)                pq.write_table(table,                               where,                               filesystem=filesystem,                               version="2.0",                               flavor="spark")            if arcpy.env.isCancelled:                break            arcpy.SetProgressorPosition()                end_5 = time.perf_counter()        arcpy.AddMessage("Step 5 completed in {}\n\n".format(generate_runtime_str(end_5 - start_5)))        end = time.perf_counter()        arcpy.AddMessage("Parcel Feature Class to Parquet Tool completed in {}".format(generate_runtime_str(end - start)))                return    def postExecute(self, parameters):        arcpy.management.Delete(arcpy.env.scratchGDB)        arcpy.management.Delete(arcpy.env.scratchGDB)        return